{"version":3,"sources":["component/ImageCard.js","component/Header.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","className","onClick","picked","id","alt","name","src","image","Header","count","highCount","App","state","images","remainingChar","remaining","filter","char","setState","find","score","sortImages","alert","i","length","j","Math","floor","random","x","this","map","key","chosen","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"06EAgBeA,MAbf,SAAmBC,GAEf,OACI,oCACQ,yBAAKC,UAAU,OAAOC,QAAS,kBAAIF,EAAMG,OAAOH,EAAMI,MAClD,yBAAKH,UAAU,iBACX,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,Y,OCoB1CC,MA3Bf,SAAiBT,GACb,OACI,oCACA,4BAAQC,UAAU,UACd,wBAAIA,UAAU,SAAd,eAGA,wBAAIA,UAAU,SAAd,4BAGA,wBAAIA,UAAU,SAAd,UACYD,EAAMU,MADlB,kBACwCV,EAAMW,YAIlD,yBAAKV,UAAU,eACX,4CAGA,6GCmEGW,E,2MAhFbC,MAAQ,CACNC,SACAJ,MAAO,EACPC,UAAW,EACXI,cAAeD,G,EAGjBX,OAAS,SAACC,GACR,IAAMY,EAAY,EAAKH,MAAME,cAAcE,QAAO,SAAAC,GAAI,OAAIA,EAAKd,KAAOA,KACtE,EAAKe,SAAS,CAAEJ,cAAeC,IAEd,EAAKH,MAAME,cAAcK,MAAK,SAAAF,GAAI,OAAIA,EAAKd,KAAOA,MAGjE,EAAKiB,QACL,EAAKC,WAAWR,KAEhBS,MAAM,gDACN,EAAKJ,SAAS,CAAET,MAAO,IACvB,EAAKS,SAAS,CAAEJ,cAAeD,IAC/B,EAAKQ,WAAWR,K,EAIpBO,MAAQ,WAEN,EAAKF,SAAS,CAAET,MAAO,EAAKG,MAAMH,MAAQ,IAElB,KAArB,EAAKG,MAAMH,QACZa,MAAM,wBACN,EAAKJ,SAAS,CAAET,MAAO,IACvB,EAAKS,SAAS,CAAEJ,cAAeD,KAE7B,EAAKD,MAAMH,OAAS,EAAKG,MAAMF,WACjC,EAAKQ,SAAS,CAAER,UAAW,EAAKE,MAAMF,UAAY,K,EAIxDW,WAAa,SAACR,GAEZ,IAAI,IAAIU,EAAGV,EAAOW,OAAQ,EAAGD,EAAE,EAAGA,IAAI,CACrC,IAAIE,EAAGC,KAAKC,MAAMD,KAAKE,UAAUL,EAAE,IAC7BM,EAAIhB,EAAOU,GACjBV,EAAOU,GAAKV,EAAOY,GACnBZ,EAAOY,GAAKI,EAEb,OAAOhB,G,wEAKG,IAAD,OAEP,OACE,oCAEE,kBAAC,EAAD,CACEJ,MAAOqB,KAAKlB,MAAMH,MAClBC,UAAWoB,KAAKlB,MAAMF,YAGxB,yBAAKV,UAAU,eAEZ8B,KAAKlB,MAAMC,OAAOkB,KAAI,SAAAxB,GAAK,OAC1B,kBAAC,EAAD,CACEA,MAAOA,EAAMA,MACbyB,IAAKzB,EAAMJ,GACXA,GAAII,EAAMJ,GACVE,KAAME,EAAMF,KACZH,OAAQ,EAAKA,OACb+B,OAAQ1B,EAAM0B,kB,GAxEVC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.98944ad3.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction ImageCard(props) {\n   \n    return (\n        <>\n                <div className=\"card\" onClick={()=>props.picked(props.id)}>\n                    <div className=\"img-container\">\n                        <img alt={props.name} src={props.image} />\n                    </div>\n                </div>\n        </>\n    )\n}\n\nexport default ImageCard;","import React from 'react';\n\nfunction Header (props){\n    return (\n        <>\n        <header className=\"header\">\n            <h1 className=\"float\">\n                Clicky Game\n            </h1>\n            <h2 className=\"float\">\n                Click an Image to Begin!\n            </h2>\n            <h2 className=\"float\">\n                Score: {props.count} | High Score: {props.highCount}\n            </h2>\n        </header>\n\n        <div className=\"description\">\n            <h2>\n                Clicky Game!\n            </h2>\n            <h4>\n                Click on an image to earn points, but don't click on the same image twice!\n            </h4>\n        </div>\n        </>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport ImageCard from './component/ImageCard'\nimport images from './images.json'\nimport Header from './component/Header';\n\nclass App extends React.Component {\n\n  state = {\n    images,\n    count: 0,\n    highCount: 0,\n    remainingChar: images\n  }\n\n  picked = (id) => {\n    const remaining = this.state.remainingChar.filter(char => char.id !== id)\n    this.setState({ remainingChar: remaining })\n\n    const chosenId = this.state.remainingChar.find(char => char.id === id)\n\n    if (chosenId) {\n      this.score()\n      this.sortImages(images)\n    } else {\n      alert(\"You already picked that character! Try Again\")\n      this.setState({ count: 0 })\n      this.setState({ remainingChar: images })\n      this.sortImages(images)\n    }\n  }\n\n  score = () => {\n\n    this.setState({ count: this.state.count + 1 })\n    \n    if(this.state.count === 15){\n      alert(\"You won! Play Again!\")\n      this.setState({ count: 0 })\n      this.setState({ remainingChar: images })\n    }\n    if (this.state.count >= this.state.highCount) {\n      this.setState({ highCount: this.state.highCount + 1 })\n    }\n  }\n\nsortImages = (images) => {\n  \n  for(let i=(images.length)-1; i>0; i--){\n   let j= Math.floor(Math.random()*(i+1));\n   const x = images[i];\n   images[i] = images[j]\n   images[j] = x \n  }\n  return images\n}\n\n\n\n  render() {\n\n    return (\n      <>\n\n        <Header\n          count={this.state.count}\n          highCount={this.state.highCount}\n        />\n\n        <div className=\"cardWrapper\">\n\n          {this.state.images.map(image => (\n            <ImageCard\n              image={image.image}\n              key={image.id}\n              id={image.id}\n              name={image.name}\n              picked={this.picked}\n              chosen={image.chosen}\n            />\n          ))}\n        </div>\n\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}